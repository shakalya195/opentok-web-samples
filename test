import { Component,ViewChild, OnInit, ChangeDetectorRef, ElementRef, Renderer2 } from '@angular/core';
import { Body } from '@angular/http/src/body';
import { DomSanitizer } from '@angular/platform-browser';


  
// Local stream that will be reproduced on the video.
let localStream;

@Component({
  selector: 'app-opentok',
  templateUrl: './opentok.component.html',
  styleUrls: ['./opentok.component.css']
})
export class OpentokComponent implements OnInit {

  startButton:any ={};
  callButton :any ={};
  hangupButton:any={}; 
  localVideo:any;
  remoteVideo:any;

  localStream:any;

  pc1:any; offer1:any; field1:any;
  pc2:any; offer2:any; field2:any;

  configurations={
    "urls": [
    "turn:13.250.13.83:3478?transport=udp"
    ],
    "username": "YzYNCouZM1mhqhmseWk6",
    "credential": "YzYNCouZM1mhqhmseWk6"
    };

  constructor(
    private ref: ChangeDetectorRef,
    private renderer: Renderer2,
    private elementref: ElementRef,
    private domSanitizer:DomSanitizer
  ){
  }

  ngOnInit () {
  }

  start() {
    console.log('Requesting local stream');
    navigator.mediaDevices.getUserMedia({audio:true, video:true})
    .then(stream=> {
      this.localVideo = this.elementref.nativeElement.querySelector('.localVideo');
      this.localVideo.srcObject = stream;
    })
    .catch(function(err) {
       console.log(err);
    });
  }

  async call(){
    // this.offer1 = await this.pc1.createOffer({offerToReceiveAudio: 1,offerToReceiveVideo: 1});
    // this.pc1.setLocalDescription(this.offer1);
    // console.log('OFFER1',JSON.stringify(this.offer1));
    // this.pc2 = new RTCPeerConnection({});
    // let config2 = this.pc2.getConfiguration();
    // console.log('Config',config2);

    this.pc1 = new RTCPeerConnection({});
    console.log('Created local peer connection object pc1');
    this.pc1.addEventListener('icecandidate', e => this.onIceCandidate(this.pc1, e));
    this.pc2 = new RTCPeerConnection({});
    console.log('Created remote peer connection object pc2');
    this.pc2.addEventListener('icecandidate', e => this.onIceCandidate(this.pc2, e));
    this.pc1.addEventListener('iceconnectionstatechange', e => this.onIceStateChange(this.pc1, e));
    this.pc2.addEventListener('iceconnectionstatechange', e => this.onIceStateChange(this.pc2, e));
    this.pc2.addEventListener('track', this.gotRemoteStream);
    this.pc1.addEventListener('track', this.gotRemoteStream);
    // localStream.getTracks().forEach(track => this.pc1.addTrack(track, localStream));

    try {
      console.log('pc1 createOffer start');
      const offer = await this.pc1.createOffer({offerToReceiveAudio: 1,offerToReceiveVideo: 1});
      await this.onCreateOfferSuccess(offer);
      console.log('OFFER1', JSON.stringify(offer));
    } catch (e) {
      this.onCreateSessionDescriptionError(e);
    }

  }


  onCreateSessionDescriptionError(error) {
    console.log(`Failed to create session description: ${error.toString()}`);
  }
  
  async onCreateOfferSuccess(desc) {
    console.log(`Offer from pc1\n${desc.sdp}`);
    console.log('pc1 setLocalDescription start');
    try {
      await this.pc1.setLocalDescription(desc);
      this.onSetLocalSuccess(this.pc1);
    } catch (e) {

    }
  
    console.log('pc2 setRemoteDescription start');
    try {
      await this.pc2.setRemoteDescription(desc);
      this.onSetRemoteSuccess(this.pc2);
    } catch (e) {

    }
  
    console.log('pc2 createAnswer start');
    // Since the 'remote' side has no media stream we need
    // to pass in the right constraints in order for it to
    // accept the incoming offer of audio and video.
    try {
      const answer = await this.pc2.createAnswer();
      await this.onCreateAnswerSuccess(answer);
    } catch (e) {
      this.onCreateSessionDescriptionError(e);
    }
  }
  
  onSetLocalSuccess(pc) {
    console.log(`${(pc)} setLocalDescription complete`);
  }
  
  onSetRemoteSuccess(pc) {
    console.log(`${(pc)} setRemoteDescription complete`);
  }
  
  onSetSessionDescriptionError(error) {
    console.log(`Failed to set session description: ${error.toString()}`);
  }
  
  gotRemoteStream(e) {
    if (this.remoteVideo.srcObject !== e.streams[0]) {
      this.remoteVideo.srcObject = e.streams[0];
      console.log('pc2 received remote stream');
    }
  }
  
  async onCreateAnswerSuccess(desc) {
    console.log(`Answer from pc2:\n${desc.sdp}`);
    console.log('pc2 setLocalDescription start');
    try {
      await this.pc2.setLocalDescription(desc);
      this.onSetLocalSuccess(this.pc2);
    } catch (e) {
      this.onSetSessionDescriptionError(e);
    }
    console.log('pc1 setRemoteDescription start');
    try {
      await this.pc1.setRemoteDescription(desc);
      this.onSetRemoteSuccess(this.pc1);
    } catch (e) {
      this.onSetSessionDescriptionError(e);
    }
  }
  
  async onIceCandidate(pc, event) {
    try {
      await (this.getOtherPc(pc).addIceCandidate(event.candidate));
      this.onAddIceCandidateSuccess(pc);
    } catch (e) {
      this.onAddIceCandidateError(pc, e);
    }
    console.log(`${(pc)} ICE candidate:\n${event.candidate ? event.candidate.candidate : '(null)'}`);
  }
  
  getOtherPc(pc) {
    return (pc === this.pc1) ? this.pc2 : this.pc1;
  }

  onAddIceCandidateSuccess(pc) {
    console.log(`${(pc)} addIceCandidate success`);
  }
  
  onAddIceCandidateError(pc, error) {
    console.log(`${(pc)} failed to add ICE Candidate: ${error.toString()}`);
  }
  
  onIceStateChange(pc, event) {
    if (pc) {
      console.log(`${(pc)} ICE state: ${pc.iceConnectionState}`);
      console.log('ICE state change event: ', event);
    }
  }
  
  hangup() {
    console.log('Ending call');
    this.pc1.close();
    this.pc2.close();
    this.pc1 = null;
    this.pc2 = null;
    this.hangupButton.disabled = true;
    this.callButton.disabled = false;
  }

  callCallback(){
    console.log(this.field1);
    let desc = JSON.parse(this.field1);
    this.pc1.setRemoteDescription(desc,()=>{
      console.log('Success');
    });
  }

  async pickup(){
    console.log(this.field2);
    let desc = JSON.parse(this.field2);
    console.log('PICKING',desc);
    this.pc2.setRemoteDescription(desc,async()=> {
      this.pc2.createAnswer((desc2)=> {
          this.offer2 = desc2;
          this.pc2.setLocalDescription(this.offer2);
          console.log('OFFER2',JSON.stringify(this.offer2));


      }, err=>{});

    }, err=>{});
  }



}
